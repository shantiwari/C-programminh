Description

Write a recursive code to find the block product of an array.

The following is the algorithm to find the block product recursively:

Given an array A partition it into four quadrants of equal size:

                          M=[ABCD]


The block product of the array is defined recursively as : 

                           |M|=|A|∗|D|−|B|∗|C|


With the base case, when n = 4 ,  |[a,b,c,d]|=ad−bc


Note : You can assume that n is a power of 4. n>=4 and n <= 1024.

Input

The first line contains the array size n
The next n lines contains the elements of the array.

Output

Block product |M|

Example 1

M=[3215]
      |M|=3∗5−2∗1=13


Example 2

M=[32152−25510750−256]
      

|M|=∣∣∣[3215]∣∣∣∗∣∣∣[0−256]∣∣∣−∣∣∣[2−255]∣∣∣∗∣∣∣[1075]∣∣∣=13∗10−20∗5=30


Example 3

M = [4 1 6 5 2 1 6 3 4 5 0 5 0 2 0 2   0 6 2 1 3 1 0 4 3 1 7 0 1 4 7 4   0 3 1 3 3 7 0 4 4 3 5 4 4 1 0 2    2 2 7 6 4 2 6 1 1 2 4 0 3 1 4 1]

A = [ 4 1 6 5 2 1 6 3 4 5 0 5 0 2 0 2 ]                |A|  =  0
B = [ 0 6 2 1 3 1 0 4 3 1 7 0 1 4 7 4 ]                |B|  =  372
C = [ 0 3 1 3 3 7 0 4 4 3 5 4 4 1 0 2 ]                |C|  =  -36
D = [ 2 2 7 6 4 2 6 1 1 2 4 0 3 1 4 1 ]                |D|  =  -62

So, |M| = | [ 0 372 -36 -62] | = 13392.


#include<stdio.h>
#include<math.h>
int det(int matrix[],int n)
{ 
  if(n==4)
  {
    return matrix[0]*matrix[3]-matrix[1]*matrix[2];
  }
  else
  {
    int k =n/4;
    int q1[k],q2[k],q3[k],q4[k];
    for (int i=0;i<k;i++)
    {
      q1[i]=matrix[i];
      q2[i]=matrix[k+i];
      q3[i]=matrix[2*k+i];
      q4[i]=matrix[3*k+i];
    }
    return det(q1,k)*det(q4,k)-det(q2,k)*det(q3,k);
  }
}
  
int main()
{
  int n;
  scanf("%d",&n);
  int matrix[n];
  for(int i=0;i<n;i++)
  {
    scanf("%d",&matrix[i]);
  }
  printf("%d",det(matrix,n));
  return 0;
}
